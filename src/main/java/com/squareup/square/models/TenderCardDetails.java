package com.squareup.square.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonGetter;

public class TenderCardDetails {

    @JsonCreator
    public TenderCardDetails(
            @JsonProperty("status") String status,
            @JsonProperty("card") Card card,
            @JsonProperty("entry_method") String entryMethod) {
        this.status = status;
        this.card = card;
        this.entryMethod = entryMethod;
    }

    private final String status;
    private final Card card;
    private final String entryMethod;

    @Override
    public int hashCode() {
        return Objects.hash(status, card, entryMethod);
    }

    @Override
    public boolean equals(Object o) {
        if (o == this)
            return true;
        if (!(o instanceof TenderCardDetails)) {
            return false;
        }
        TenderCardDetails tenderCardDetails = (TenderCardDetails) o;
        return Objects.equals(status, tenderCardDetails.status) &&
            Objects.equals(card, tenderCardDetails.card) &&
            Objects.equals(entryMethod, tenderCardDetails.entryMethod);
    }

    /**
     * Getter for Status.
     * Indicates the card transaction's current status.
     */
    @JsonGetter("status")
    public String getStatus() { 
        return this.status;
    }

    /**
     * Getter for Card.
     * Represents the payment details of a card to be used for payments. These
     * details are determined by the `card_nonce` generated by `SqPaymentForm`.
     */
    @JsonGetter("card")
    public Card getCard() { 
        return this.card;
    }

    /**
     * Getter for EntryMethod.
     * Indicates the method used to enter the card's details.
     */
    @JsonGetter("entry_method")
    public String getEntryMethod() { 
        return this.entryMethod;
    }

 
    public Builder toBuilder() {
        Builder builder = new Builder()
            .status(getStatus())
            .card(getCard())
            .entryMethod(getEntryMethod());
            return builder;
    }

    public static class Builder {
        private String status;
        private Card card;
        private String entryMethod;

        public Builder() { }

        public Builder status(String value) {
            status = value;
            return this;
        }
        public Builder card(Card value) {
            card = value;
            return this;
        }
        public Builder entryMethod(String value) {
            entryMethod = value;
            return this;
        }

        public TenderCardDetails build() {
            return new TenderCardDetails(status,
                card,
                entryMethod);
        }
    }
}
