package com.squareup.square.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonGetter;

public class Card {

    @JsonCreator
    public Card(
            @JsonProperty("id") String id,
            @JsonProperty("card_brand") String cardBrand,
            @JsonProperty("last_4") String last4,
            @JsonProperty("exp_month") Long expMonth,
            @JsonProperty("exp_year") Long expYear,
            @JsonProperty("cardholder_name") String cardholderName,
            @JsonProperty("billing_address") Address billingAddress,
            @JsonProperty("fingerprint") String fingerprint,
            @JsonProperty("bin") String bin) {
        this.id = id;
        this.cardBrand = cardBrand;
        this.last4 = last4;
        this.expMonth = expMonth;
        this.expYear = expYear;
        this.cardholderName = cardholderName;
        this.billingAddress = billingAddress;
        this.fingerprint = fingerprint;
        this.bin = bin;
    }

    private final String id;
    private final String cardBrand;
    private final String last4;
    private final Long expMonth;
    private final Long expYear;
    private final String cardholderName;
    private final Address billingAddress;
    private final String fingerprint;
    private final String bin;

    @Override
    public int hashCode() {
        return Objects.hash(id, cardBrand, last4, expMonth, expYear, cardholderName, billingAddress, fingerprint, bin);
    }

    @Override
    public boolean equals(Object o) {
        if (o == this)
            return true;
        if (!(o instanceof Card)) {
            return false;
        }
        Card card = (Card) o;
        return Objects.equals(id, card.id) &&
            Objects.equals(cardBrand, card.cardBrand) &&
            Objects.equals(last4, card.last4) &&
            Objects.equals(expMonth, card.expMonth) &&
            Objects.equals(expYear, card.expYear) &&
            Objects.equals(cardholderName, card.cardholderName) &&
            Objects.equals(billingAddress, card.billingAddress) &&
            Objects.equals(fingerprint, card.fingerprint) &&
            Objects.equals(bin, card.bin);
    }

    /**
     * Getter for Id.
     * Unique ID for this card. Generated by Square.
     */
    @JsonGetter("id")
    public String getId() { 
        return this.id;
    }

    /**
     * Getter for CardBrand.
     * Indicates a card's brand, such as `VISA` or `MASTERCARD`.
     */
    @JsonGetter("card_brand")
    public String getCardBrand() { 
        return this.cardBrand;
    }

    /**
     * Getter for Last4.
     * The last 4 digits of the card number.
     */
    @JsonGetter("last_4")
    public String getLast4() { 
        return this.last4;
    }

    /**
     * Getter for ExpMonth.
     * The expiration month of the associated card as an integer between 1 and 12.
     */
    @JsonGetter("exp_month")
    public Long getExpMonth() { 
        return this.expMonth;
    }

    /**
     * Getter for ExpYear.
     * The four-digit year of the card's expiration date.
     */
    @JsonGetter("exp_year")
    public Long getExpYear() { 
        return this.expYear;
    }

    /**
     * Getter for CardholderName.
     * The name of the cardholder.
     */
    @JsonGetter("cardholder_name")
    public String getCardholderName() { 
        return this.cardholderName;
    }

    /**
     * Getter for BillingAddress.
     * Represents a physical address.
     */
    @JsonGetter("billing_address")
    public Address getBillingAddress() { 
        return this.billingAddress;
    }

    /**
     * Getter for Fingerprint.
     * __Not currently set.__ Intended as a Square-assigned identifier, based 
     * on the card number, to identify the card across multiple locations within a
     * single application.
     */
    @JsonGetter("fingerprint")
    public String getFingerprint() { 
        return this.fingerprint;
    }

    /**
     * Getter for Bin.
     * The first six digits of the card number, known as the Bank Identification Number (BIN). Only the Payments API
     * returns this field.
     */
    @JsonGetter("bin")
    public String getBin() { 
        return this.bin;
    }

 
    public Builder toBuilder() {
        Builder builder = new Builder()
            .id(getId())
            .cardBrand(getCardBrand())
            .last4(getLast4())
            .expMonth(getExpMonth())
            .expYear(getExpYear())
            .cardholderName(getCardholderName())
            .billingAddress(getBillingAddress())
            .fingerprint(getFingerprint())
            .bin(getBin());
            return builder;
    }

    public static class Builder {
        private String id;
        private String cardBrand;
        private String last4;
        private Long expMonth;
        private Long expYear;
        private String cardholderName;
        private Address billingAddress;
        private String fingerprint;
        private String bin;

        public Builder() { }

        public Builder id(String value) {
            id = value;
            return this;
        }
        public Builder cardBrand(String value) {
            cardBrand = value;
            return this;
        }
        public Builder last4(String value) {
            last4 = value;
            return this;
        }
        public Builder expMonth(Long value) {
            expMonth = value;
            return this;
        }
        public Builder expYear(Long value) {
            expYear = value;
            return this;
        }
        public Builder cardholderName(String value) {
            cardholderName = value;
            return this;
        }
        public Builder billingAddress(Address value) {
            billingAddress = value;
            return this;
        }
        public Builder fingerprint(String value) {
            fingerprint = value;
            return this;
        }
        public Builder bin(String value) {
            bin = value;
            return this;
        }

        public Card build() {
            return new Card(id,
                cardBrand,
                last4,
                expMonth,
                expYear,
                cardholderName,
                billingAddress,
                fingerprint,
                bin);
        }
    }
}
