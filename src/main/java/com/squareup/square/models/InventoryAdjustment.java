package com.squareup.square.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonGetter;

public class InventoryAdjustment {

    @JsonCreator
    public InventoryAdjustment(
            @JsonProperty("id") String id,
            @JsonProperty("reference_id") String referenceId,
            @JsonProperty("from_state") String fromState,
            @JsonProperty("to_state") String toState,
            @JsonProperty("location_id") String locationId,
            @JsonProperty("catalog_object_id") String catalogObjectId,
            @JsonProperty("catalog_object_type") String catalogObjectType,
            @JsonProperty("quantity") String quantity,
            @JsonProperty("total_price_money") Money totalPriceMoney,
            @JsonProperty("occurred_at") String occurredAt,
            @JsonProperty("created_at") String createdAt,
            @JsonProperty("source") SourceApplication source,
            @JsonProperty("employee_id") String employeeId,
            @JsonProperty("transaction_id") String transactionId,
            @JsonProperty("refund_id") String refundId,
            @JsonProperty("purchase_order_id") String purchaseOrderId,
            @JsonProperty("goods_receipt_id") String goodsReceiptId) {
        this.id = id;
        this.referenceId = referenceId;
        this.fromState = fromState;
        this.toState = toState;
        this.locationId = locationId;
        this.catalogObjectId = catalogObjectId;
        this.catalogObjectType = catalogObjectType;
        this.quantity = quantity;
        this.totalPriceMoney = totalPriceMoney;
        this.occurredAt = occurredAt;
        this.createdAt = createdAt;
        this.source = source;
        this.employeeId = employeeId;
        this.transactionId = transactionId;
        this.refundId = refundId;
        this.purchaseOrderId = purchaseOrderId;
        this.goodsReceiptId = goodsReceiptId;
    }

    private final String id;
    private final String referenceId;
    private final String fromState;
    private final String toState;
    private final String locationId;
    private final String catalogObjectId;
    private final String catalogObjectType;
    private final String quantity;
    private final Money totalPriceMoney;
    private final String occurredAt;
    private final String createdAt;
    private final SourceApplication source;
    private final String employeeId;
    private final String transactionId;
    private final String refundId;
    private final String purchaseOrderId;
    private final String goodsReceiptId;

    @Override
    public int hashCode() {
        return Objects.hash(id, referenceId, fromState, toState, locationId, catalogObjectId, catalogObjectType, quantity, totalPriceMoney, occurredAt, createdAt, source, employeeId, transactionId, refundId, purchaseOrderId, goodsReceiptId);
    }

    @Override
    public boolean equals(Object o) {
        if (o == this)
            return true;
        if (!(o instanceof InventoryAdjustment)) {
            return false;
        }
        InventoryAdjustment inventoryAdjustment = (InventoryAdjustment) o;
        return Objects.equals(id, inventoryAdjustment.id) &&
            Objects.equals(referenceId, inventoryAdjustment.referenceId) &&
            Objects.equals(fromState, inventoryAdjustment.fromState) &&
            Objects.equals(toState, inventoryAdjustment.toState) &&
            Objects.equals(locationId, inventoryAdjustment.locationId) &&
            Objects.equals(catalogObjectId, inventoryAdjustment.catalogObjectId) &&
            Objects.equals(catalogObjectType, inventoryAdjustment.catalogObjectType) &&
            Objects.equals(quantity, inventoryAdjustment.quantity) &&
            Objects.equals(totalPriceMoney, inventoryAdjustment.totalPriceMoney) &&
            Objects.equals(occurredAt, inventoryAdjustment.occurredAt) &&
            Objects.equals(createdAt, inventoryAdjustment.createdAt) &&
            Objects.equals(source, inventoryAdjustment.source) &&
            Objects.equals(employeeId, inventoryAdjustment.employeeId) &&
            Objects.equals(transactionId, inventoryAdjustment.transactionId) &&
            Objects.equals(refundId, inventoryAdjustment.refundId) &&
            Objects.equals(purchaseOrderId, inventoryAdjustment.purchaseOrderId) &&
            Objects.equals(goodsReceiptId, inventoryAdjustment.goodsReceiptId);
    }

    /**
     * Getter for Id.
     * A unique ID generated by Square for the
     * `InventoryAdjustment`.
     */
    @JsonGetter("id")
    public String getId() { 
        return this.id;
    }

    /**
     * Getter for ReferenceId.
     * An optional ID provided by the application to tie the
     * `InventoryAdjustment` to an external
     * system.
     */
    @JsonGetter("reference_id")
    public String getReferenceId() { 
        return this.referenceId;
    }

    /**
     * Getter for FromState.
     * Indicates the state of a tracked item quantity in the lifecycle of goods.
     */
    @JsonGetter("from_state")
    public String getFromState() { 
        return this.fromState;
    }

    /**
     * Getter for ToState.
     * Indicates the state of a tracked item quantity in the lifecycle of goods.
     */
    @JsonGetter("to_state")
    public String getToState() { 
        return this.toState;
    }

    /**
     * Getter for LocationId.
     * The Square ID of the [Location](#type-location) where the related
     * quantity of items are being tracked.
     */
    @JsonGetter("location_id")
    public String getLocationId() { 
        return this.locationId;
    }

    /**
     * Getter for CatalogObjectId.
     * The Square generated ID of the
     * `CatalogObject` being tracked.
     */
    @JsonGetter("catalog_object_id")
    public String getCatalogObjectId() { 
        return this.catalogObjectId;
    }

    /**
     * Getter for CatalogObjectType.
     * The `CatalogObjectType` of the
     * `CatalogObject` being tracked. Tracking is only
     * supported for the `ITEM_VARIATION` type.
     */
    @JsonGetter("catalog_object_type")
    public String getCatalogObjectType() { 
        return this.catalogObjectType;
    }

    /**
     * Getter for Quantity.
     * The number of items affected by the adjustment as a decimal string.
     * Can support up to 5 digits after the decimal point.
     * _Important_: The Point of Sale app and Dashboard do not currently support
     * decimal quantities. If a Point of Sale app or Dashboard attempts to read a
     * decimal quantity on inventory counts or adjustments, the quantity will be rounded
     * down to the nearest integer. For example, `2.5` will become `2`, and `-2.5`
     * will become `-3`.
     * Read [Decimal Quantities (BETA)](https://developer.squareup.com/docs/inventory-api/what-it-does#decimal-quantities-beta) for more information.
     */
    @JsonGetter("quantity")
    public String getQuantity() { 
        return this.quantity;
    }

    /**
     * Getter for TotalPriceMoney.
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonGetter("total_price_money")
    public Money getTotalPriceMoney() { 
        return this.totalPriceMoney;
    }

    /**
     * Getter for OccurredAt.
     * A client-generated timestamp in RFC 3339 format that indicates when
     * the adjustment took place. For write actions, the `occurred_at`
     * timestamp cannot be older than 24 hours or in the future relative to the
     * time of the request.
     */
    @JsonGetter("occurred_at")
    public String getOccurredAt() { 
        return this.occurredAt;
    }

    /**
     * Getter for CreatedAt.
     * A read-only timestamp in RFC 3339 format that indicates when Square
     * received the adjustment.
     */
    @JsonGetter("created_at")
    public String getCreatedAt() { 
        return this.createdAt;
    }

    /**
     * Getter for Source.
     * Provides information about the application used to generate an inventory
     * change.
     */
    @JsonGetter("source")
    public SourceApplication getSource() { 
        return this.source;
    }

    /**
     * Getter for EmployeeId.
     * The Square ID of the [Employee](#type-employee) responsible for the
     * inventory adjustment.
     */
    @JsonGetter("employee_id")
    public String getEmployeeId() { 
        return this.employeeId;
    }

    /**
     * Getter for TransactionId.
     * The read-only Square ID of the [Transaction][#type-transaction] that
     * caused the adjustment. Only relevant for payment-related state
     * transitions.
     */
    @JsonGetter("transaction_id")
    public String getTransactionId() { 
        return this.transactionId;
    }

    /**
     * Getter for RefundId.
     * The read-only Square ID of the [Refund][#type-refund] that
     * caused the adjustment. Only relevant for refund-related state
     * transitions.
     */
    @JsonGetter("refund_id")
    public String getRefundId() { 
        return this.refundId;
    }

    /**
     * Getter for PurchaseOrderId.
     * The read-only Square ID of the purchase order that caused the
     * adjustment. Only relevant for state transitions from the Square for Retail
     * app.
     */
    @JsonGetter("purchase_order_id")
    public String getPurchaseOrderId() { 
        return this.purchaseOrderId;
    }

    /**
     * Getter for GoodsReceiptId.
     * The read-only Square ID of the Square goods receipt that caused the
     * adjustment. Only relevant for state transitions from the Square for Retail
     * app.
     */
    @JsonGetter("goods_receipt_id")
    public String getGoodsReceiptId() { 
        return this.goodsReceiptId;
    }

 
    public Builder toBuilder() {
        Builder builder = new Builder()
            .id(getId())
            .referenceId(getReferenceId())
            .fromState(getFromState())
            .toState(getToState())
            .locationId(getLocationId())
            .catalogObjectId(getCatalogObjectId())
            .catalogObjectType(getCatalogObjectType())
            .quantity(getQuantity())
            .totalPriceMoney(getTotalPriceMoney())
            .occurredAt(getOccurredAt())
            .createdAt(getCreatedAt())
            .source(getSource())
            .employeeId(getEmployeeId())
            .transactionId(getTransactionId())
            .refundId(getRefundId())
            .purchaseOrderId(getPurchaseOrderId())
            .goodsReceiptId(getGoodsReceiptId());
            return builder;
    }

    public static class Builder {
        private String id;
        private String referenceId;
        private String fromState;
        private String toState;
        private String locationId;
        private String catalogObjectId;
        private String catalogObjectType;
        private String quantity;
        private Money totalPriceMoney;
        private String occurredAt;
        private String createdAt;
        private SourceApplication source;
        private String employeeId;
        private String transactionId;
        private String refundId;
        private String purchaseOrderId;
        private String goodsReceiptId;

        public Builder() { }

        public Builder id(String value) {
            id = value;
            return this;
        }
        public Builder referenceId(String value) {
            referenceId = value;
            return this;
        }
        public Builder fromState(String value) {
            fromState = value;
            return this;
        }
        public Builder toState(String value) {
            toState = value;
            return this;
        }
        public Builder locationId(String value) {
            locationId = value;
            return this;
        }
        public Builder catalogObjectId(String value) {
            catalogObjectId = value;
            return this;
        }
        public Builder catalogObjectType(String value) {
            catalogObjectType = value;
            return this;
        }
        public Builder quantity(String value) {
            quantity = value;
            return this;
        }
        public Builder totalPriceMoney(Money value) {
            totalPriceMoney = value;
            return this;
        }
        public Builder occurredAt(String value) {
            occurredAt = value;
            return this;
        }
        public Builder createdAt(String value) {
            createdAt = value;
            return this;
        }
        public Builder source(SourceApplication value) {
            source = value;
            return this;
        }
        public Builder employeeId(String value) {
            employeeId = value;
            return this;
        }
        public Builder transactionId(String value) {
            transactionId = value;
            return this;
        }
        public Builder refundId(String value) {
            refundId = value;
            return this;
        }
        public Builder purchaseOrderId(String value) {
            purchaseOrderId = value;
            return this;
        }
        public Builder goodsReceiptId(String value) {
            goodsReceiptId = value;
            return this;
        }

        public InventoryAdjustment build() {
            return new InventoryAdjustment(id,
                referenceId,
                fromState,
                toState,
                locationId,
                catalogObjectId,
                catalogObjectType,
                quantity,
                totalPriceMoney,
                occurredAt,
                createdAt,
                source,
                employeeId,
                transactionId,
                refundId,
                purchaseOrderId,
                goodsReceiptId);
        }
    }
}
