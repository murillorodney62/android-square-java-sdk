package com.squareup.square.models;

import java.util.Objects;
import java.util.*;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonGetter;

public class Transaction {

    @JsonCreator
    public Transaction(
            @JsonProperty("id") String id,
            @JsonProperty("location_id") String locationId,
            @JsonProperty("created_at") String createdAt,
            @JsonProperty("tenders") List<Tender> tenders,
            @JsonProperty("refunds") List<Refund> refunds,
            @JsonProperty("reference_id") String referenceId,
            @JsonProperty("product") String product,
            @JsonProperty("client_id") String clientId,
            @JsonProperty("shipping_address") Address shippingAddress,
            @JsonProperty("order_id") String orderId) {
        this.id = id;
        this.locationId = locationId;
        this.createdAt = createdAt;
        this.tenders = tenders;
        this.refunds = refunds;
        this.referenceId = referenceId;
        this.product = product;
        this.clientId = clientId;
        this.shippingAddress = shippingAddress;
        this.orderId = orderId;
    }

    private final String id;
    private final String locationId;
    private final String createdAt;
    private final List<Tender> tenders;
    private final List<Refund> refunds;
    private final String referenceId;
    private final String product;
    private final String clientId;
    private final Address shippingAddress;
    private final String orderId;

    @Override
    public int hashCode() {
        return Objects.hash(id, locationId, createdAt, tenders, refunds, referenceId, product, clientId, shippingAddress, orderId);
    }

    @Override
    public boolean equals(Object o) {
        if (o == this)
            return true;
        if (!(o instanceof Transaction)) {
            return false;
        }
        Transaction transaction = (Transaction) o;
        return Objects.equals(id, transaction.id) &&
            Objects.equals(locationId, transaction.locationId) &&
            Objects.equals(createdAt, transaction.createdAt) &&
            Objects.equals(tenders, transaction.tenders) &&
            Objects.equals(refunds, transaction.refunds) &&
            Objects.equals(referenceId, transaction.referenceId) &&
            Objects.equals(product, transaction.product) &&
            Objects.equals(clientId, transaction.clientId) &&
            Objects.equals(shippingAddress, transaction.shippingAddress) &&
            Objects.equals(orderId, transaction.orderId);
    }

    /**
     * Getter for Id.
     * The transaction's unique ID, issued by Square payments servers.
     */
    @JsonGetter("id")
    public String getId() { 
        return this.id;
    }

    /**
     * Getter for LocationId.
     * The ID of the transaction's associated location.
     */
    @JsonGetter("location_id")
    public String getLocationId() { 
        return this.locationId;
    }

    /**
     * Getter for CreatedAt.
     * The time when the transaction was created, in RFC 3339 format.
     */
    @JsonGetter("created_at")
    public String getCreatedAt() { 
        return this.createdAt;
    }

    /**
     * Getter for Tenders.
     * The tenders used to pay in the transaction.
     */
    @JsonGetter("tenders")
    public List<Tender> getTenders() { 
        return this.tenders;
    }

    /**
     * Getter for Refunds.
     * Refunds that have been applied to any tender in the transaction.
     */
    @JsonGetter("refunds")
    public List<Refund> getRefunds() { 
        return this.refunds;
    }

    /**
     * Getter for ReferenceId.
     * If the transaction was created with the [Charge](#endpoint-charge)
     * endpoint, this value is the same as the value provided for the `reference_id`
     * parameter in the request to that endpoint. Otherwise, it is not set.
     */
    @JsonGetter("reference_id")
    public String getReferenceId() { 
        return this.referenceId;
    }

    /**
     * Getter for Product.
     * Indicates the Square product used to process a transaction.
     */
    @JsonGetter("product")
    public String getProduct() { 
        return this.product;
    }

    /**
     * Getter for ClientId.
     * If the transaction was created in the Square Point of Sale app, this value
     * is the ID generated for the transaction by Square Point of Sale.
     * This ID has no relationship to the transaction's canonical `id`, which is
     * generated by Square's backend servers. This value is generated for bookkeeping
     * purposes, in case the transaction cannot immediately be completed (for example,
     * if the transaction is processed in offline mode).
     * It is not currently possible with the Connect API to perform a transaction
     * lookup by this value.
     */
    @JsonGetter("client_id")
    public String getClientId() { 
        return this.clientId;
    }

    /**
     * Getter for ShippingAddress.
     * Represents a physical address.
     */
    @JsonGetter("shipping_address")
    public Address getShippingAddress() { 
        return this.shippingAddress;
    }

    /**
     * Getter for OrderId.
     * The order_id is an identifier for the order associated with this transaction, if any.
     */
    @JsonGetter("order_id")
    public String getOrderId() { 
        return this.orderId;
    }

 
    public Builder toBuilder() {
        Builder builder = new Builder()
            .id(getId())
            .locationId(getLocationId())
            .createdAt(getCreatedAt())
            .tenders(getTenders())
            .refunds(getRefunds())
            .referenceId(getReferenceId())
            .product(getProduct())
            .clientId(getClientId())
            .shippingAddress(getShippingAddress())
            .orderId(getOrderId());
            return builder;
    }

    public static class Builder {
        private String id;
        private String locationId;
        private String createdAt;
        private List<Tender> tenders;
        private List<Refund> refunds;
        private String referenceId;
        private String product;
        private String clientId;
        private Address shippingAddress;
        private String orderId;

        public Builder() { }

        public Builder id(String value) {
            id = value;
            return this;
        }
        public Builder locationId(String value) {
            locationId = value;
            return this;
        }
        public Builder createdAt(String value) {
            createdAt = value;
            return this;
        }
        public Builder tenders(List<Tender> value) {
            tenders = value;
            return this;
        }
        public Builder refunds(List<Refund> value) {
            refunds = value;
            return this;
        }
        public Builder referenceId(String value) {
            referenceId = value;
            return this;
        }
        public Builder product(String value) {
            product = value;
            return this;
        }
        public Builder clientId(String value) {
            clientId = value;
            return this;
        }
        public Builder shippingAddress(Address value) {
            shippingAddress = value;
            return this;
        }
        public Builder orderId(String value) {
            orderId = value;
            return this;
        }

        public Transaction build() {
            return new Transaction(id,
                locationId,
                createdAt,
                tenders,
                refunds,
                referenceId,
                product,
                clientId,
                shippingAddress,
                orderId);
        }
    }
}
