package com.squareup.square.api;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;

import com.squareup.square.*;
import com.squareup.square.exceptions.*;
import com.squareup.square.http.client.HttpCallback;
import com.squareup.square.http.client.HttpClient;
import com.squareup.square.http.client.HttpContext;
import com.squareup.square.http.Headers;
import com.squareup.square.http.request.HttpRequest;
import com.squareup.square.http.response.HttpResponse;
import com.squareup.square.http.response.HttpStringResponse;
import com.squareup.square.models.*;

public final class MerchantsApi extends BaseApi {
    public MerchantsApi(Configuration config, HttpClient httpClient, Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    public MerchantsApi(Configuration config, HttpClient httpClient, Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Returns `Merchant` information for a given access token.
     * If you don't know a `Merchant` ID, you can use this endpoint to retrieve the merchant ID for an access token.
     * You can specify your personal access token to get your own merchant information or specify an OAuth token
     * to get the information for the  merchant that granted you access.
     * If you know the merchant ID, you can also use the [RetrieveMerchant](#endpoint-merchants-retrievemerchant)
     * endpoint to get the merchant information.
     * @param    cursor    Optional parameter: The cursor generated by the previous response.
     * @return    Returns the ListMerchantsResponse response from the API call
     */
    public ListMerchantsResponse listMerchants(
            final Integer cursor
    ) throws ApiException, IOException {
        HttpRequest _request = _buildListMerchantsRequest(cursor);
        authManagers.get("default").apply(_request);

        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleListMerchantsResponse(_context);
    }

    /**
     * Returns `Merchant` information for a given access token.
     * If you don't know a `Merchant` ID, you can use this endpoint to retrieve the merchant ID for an access token.
     * You can specify your personal access token to get your own merchant information or specify an OAuth token
     * to get the information for the  merchant that granted you access.
     * If you know the merchant ID, you can also use the [RetrieveMerchant](#endpoint-merchants-retrievemerchant)
     * endpoint to get the merchant information.
     * @param    cursor    Optional parameter: The cursor generated by the previous response.
     * @return    Returns the ListMerchantsResponse response from the API call 
     */
    public CompletableFuture<ListMerchantsResponse> listMerchantsAsync(
            final Integer cursor
    ) {
        return makeHttpCallAsync(() -> _buildListMerchantsRequest(cursor),
                _req -> authManagers.get("default").applyAsync(_req)
                    .thenCompose(_request -> getClientInstance().executeAsStringAsync(_request)),
                _context -> _handleListMerchantsResponse(_context));
    }

    /**
     * Builds the HttpRequest object for listMerchants
     */
    private HttpRequest _buildListMerchantsRequest(
            final Integer cursor
    ) {
        //the base uri for api requests
        String _baseUri = config.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/v2/merchants");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        _queryParameters.put("cursor", cursor);
        ApiHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = ApiHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Headers _headers = new Headers();
        _headers.add("user-agent", BaseApi.userAgent);
        _headers.add("accept", "application/json");
        _headers.add("Square-Version", "2019-12-17");
        _headers.addAll(config.getAdditionalHeaders());

        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for listMerchants
     * @return An object of type ListMerchantsResponse
     */
    private ListMerchantsResponse _handleListMerchantsResponse(HttpContext _context)
            throws ApiException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        ListMerchantsResponse _result = ApiHelper.deserialize(_responseBody,
                ListMerchantsResponse.class);

        _result = _result.toBuilder().httpContext(_context).build();
        return _result;
    }

    /**
     * Retrieve a `Merchant` object for the given `merchant_id`.
     * @param    merchantId    Required parameter: The ID of the merchant to retrieve.
     * @return    Returns the RetrieveMerchantResponse response from the API call
     */
    public RetrieveMerchantResponse retrieveMerchant(
            final String merchantId
    ) throws ApiException, IOException {
        HttpRequest _request = _buildRetrieveMerchantRequest(merchantId);
        authManagers.get("default").apply(_request);

        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleRetrieveMerchantResponse(_context);
    }

    /**
     * Retrieve a `Merchant` object for the given `merchant_id`.
     * @param    merchantId    Required parameter: The ID of the merchant to retrieve.
     * @return    Returns the RetrieveMerchantResponse response from the API call 
     */
    public CompletableFuture<RetrieveMerchantResponse> retrieveMerchantAsync(
            final String merchantId
    ) {
        return makeHttpCallAsync(() -> _buildRetrieveMerchantRequest(merchantId),
                _req -> authManagers.get("default").applyAsync(_req)
                    .thenCompose(_request -> getClientInstance().executeAsStringAsync(_request)),
                _context -> _handleRetrieveMerchantResponse(_context));
    }

    /**
     * Builds the HttpRequest object for retrieveMerchant
     */
    private HttpRequest _buildRetrieveMerchantRequest(
            final String merchantId
    ) {
        //the base uri for api requests
        String _baseUri = config.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/v2/merchants/{merchant_id}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("merchant_id", merchantId);
        ApiHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters, true);
        //validate and preprocess url
        String _queryUrl = ApiHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Headers _headers = new Headers();
        _headers.add("user-agent", BaseApi.userAgent);
        _headers.add("accept", "application/json");
        _headers.add("Square-Version", "2019-12-17");
        _headers.addAll(config.getAdditionalHeaders());

        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for retrieveMerchant
     * @return An object of type RetrieveMerchantResponse
     */
    private RetrieveMerchantResponse _handleRetrieveMerchantResponse(HttpContext _context)
            throws ApiException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        RetrieveMerchantResponse _result = ApiHelper.deserialize(_responseBody,
                RetrieveMerchantResponse.class);

        _result = _result.toBuilder().httpContext(_context).build();
        return _result;
    }

}
